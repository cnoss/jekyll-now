I"≥<h2 id="kurzbeschreibung">Kurzbeschreibung</h2>
<p>Systemprogrammierung am Beispiel von UNIX.</p>

<h2 id="lehrformsws">Lehrform/SWS</h2>
<p>4 SWS: Vorlesung 2 SWS; Praktikum 2 SWS</p>

<h2 id="arbeitsaufwand">Arbeitsaufwand</h2>
<p>Gesamtaufwand 150h, davon</p>

<ul>
  <li>36h Vorlesung</li>
  <li>36h Praktikum</li>
  <li>78h Selbststudium</li>
</ul>

<h2 id="angestrebte-lernergebnisse">Angestrebte Lernergebnisse</h2>

<p>Die Studierenden k√∂nnen den Aufbau von Betriebssystemen am Beispiel UNIX erl√§utern, indem sie</p>
<ul>
  <li>die Ziele der Entwicklung von UNIX nennen und beschreiben,</li>
  <li>die Hauptaufgaben von Betriebssystemen nennen und beschreiben,</li>
  <li>den Aufbau von Betriebssystemen darstellen und erkl√§ren,</li>
</ul>

<p>um die verschiedenen Bestandteile und Konzepte von Betriebssystemen nutzen zu k√∂nnen.</p>

<p>Die Studierenden k√∂nnen eigene C-Programme f√ºr verteilte Systeme erstellen, indem sie</p>
<ul>
  <li>einen Computer √ºber die Shell bedienen und dort eigene Programme ausf√ºhrbar machen,</li>
  <li>Daten mittels Systemschnittstellen in Dateien speichern, daraus lesen und diese verwalten,</li>
  <li>Sockets f√ºr Client- und Serverprogramme nutzen und Daten dar√ºber senden und empfangen,</li>
  <li>Prozesse f√ºr nebenl√§ufige Programmabl√§ufe erzeugen,</li>
  <li>Kommunikation zwischen Prozessen mit Shared Memory, Pipes und Message Queues realisieren,</li>
  <li>Race Conditions erkennen, kritische Abschnitte festlegen und Prozesse synchronisieren,</li>
  <li>die L√∂sungen klassischer Synchronisationsprobleme kennen und nutzen,</li>
</ul>

<p>um sp√§ter hardware- oder systemnahe Software f√ºr verteilte Systeme zu entwickeln oder zu bewerten, bspw. im Bereich ¬ªInternet of Things¬´</p>

<p>Die Studierenden k√∂nnen theoretische Grundlagen von Betriebssystemen er√∂rtern, indem sie</p>
<ul>
  <li>Programme und Prozesse unterscheiden und letztere mit ihren Zust√§nden modellieren,</li>
  <li>verschiedene Strategien f√ºr das Scheduling von Prozessen anwenden und bewerten,</li>
  <li>die Organisation des Speichers auf einem Datentr√§ger erkl√§ren und darstellen,</li>
  <li>die Abbildung von Prozessen im Arbeitsspeicher erkl√§ren und verschiedene Ans√§tze zur Verwaltung erl√§utern,</li>
</ul>

<p>um sp√§ter Auswirkungen von Betriebssystemvorg√§ngen auf eigene Programme zu erkennen und darauf zu reagieren.</p>

<h2 id="inhalt">Inhalt</h2>

<p>Systemprogrammierung am Beispiel von UNIX:</p>
<ul>
  <li>Shell-Programmierung</li>
  <li>Prozess-Modelle</li>
  <li>Prozess-Erzeugung und Synchronisation</li>
  <li>UNIX-Prozesse und elementare Synchronisation</li>
  <li>Pipes</li>
  <li>Shared Memory</li>
  <li>Synchronisationsprimitive f√ºr den wechselseitigen Ausschluss</li>
  <li>Semaphoren</li>
  <li>Nachrichtenwarteschlangen</li>
  <li>Dateisysteme</li>
  <li>TCP/IP</li>
  <li>Sockets</li>
  <li>Remote Procedure Call</li>
  <li>Strategien zum Scheduling und zur Speicherverwaltung</li>
  <li>Klassische Synchronisationsprobleme</li>
</ul>

<h2 id="medienformen">Medienformen</h2>
<p>Foliensammlung, ausformuliertes Skript, Beispiell√∂sungen</p>

<h2 id="literatur">Literatur</h2>
<ul>
  <li>Tanenbaum, A. S.: ‚ÄûModerne Betriebssysteme‚Äú</li>
  <li>Brown, C.: ‚ÄûProgrammieren verteilter UNIX-Anwendungen‚Äú</li>
  <li>Kernighan, B. W., Pike, R.: ‚ÄûDer UNIX-Werkzeugkasten‚Äú</li>
  <li>Ehses, E., K√∂hler, L., Stenzel, H., Victor, F. ‚ÄûBetriebssysteme: Ein Lehrbuch mit √úbungen zur Systemprogrammierung in UNIX/Linux‚Äú</li>
</ul>

:ET